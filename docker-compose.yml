version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: omsms-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: omsms_master
      POSTGRES_USER: ${POSTGRES_USER:-omsms_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-omsms_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - omsms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-omsms_user} -d omsms_master"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: omsms-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@omsms.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - omsms-network
    depends_on:
      postgres:
        condition: service_healthy

  # Redis (Caching and Session Storage)
  redis:
    image: redis:7-alpine
    container_name: omsms-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - omsms-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OMSMS Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
        VERSION: ${VERSION:-1.0.0}
        BUILD_DATE: ${BUILD_DATE}
        COMMIT_HASH: ${COMMIT_HASH}
    container_name: omsms-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      
      # Database Configuration
      MASTER_DATABASE_URL: postgresql://${POSTGRES_USER:-omsms_user}:${POSTGRES_PASSWORD:-omsms_password}@postgres:5432/omsms_master
      TENANT_DATABASE_URL: postgresql://${POSTGRES_USER:-omsms_user}:${POSTGRES_PASSWORD:-omsms_password}@postgres:5432/omsms_tenant_demo
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-32-character-encryption-key}
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret-key}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      
      # Storage Configuration
      STORAGE_PROVIDER: ${STORAGE_PROVIDER:-local}
      LOCAL_UPLOAD_PATH: /app/uploads
      LOCAL_BASE_URL: http://localhost:${BACKEND_PORT:-3001}/uploads
      
      # Email Configuration (if using email features)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM:-noreply@omsms.com}
      
      # Frontend URL
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Monitoring
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
    volumes:
      - uploads_data:/app/uploads
      - reports_data:/app/temp/reports
      - logs_data:/app/logs
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - omsms-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx (Reverse Proxy and Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: omsms-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - uploads_data:/var/www/uploads:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - omsms-network
    depends_on:
      backend:
        condition: service_healthy

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: omsms-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - omsms-network
    profiles:
      - monitoring

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: omsms-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - omsms-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  reports_data:
    driver: local
  logs_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  omsms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16